import logging
import sys
from traceback import format_exception
from typing import Callable, Union

from PyQt5.Qt import QTextCursor
from PyQt5.QtWidgets import QMainWindow, QMenu, QActionGroup
from serial.serialutil import SerialException

from ui.autogenerated.main_window import Ui_main_window
from ui.wrappers.dialogs.enter_custom_port_dialog import EnterCustomPortDialog
from ui.wrappers.dialogs.set_baud_rate_dialog import SetBaudRateDialog
from utils.dialogs import error_dlg
from utils.logger import create_logger
from utils.serial_config import BYTE_SIZES, DEFAULT_BYTE_SIZE, \
    PARITIES, DEFAULT_PARITY, STOP_BITS, DEFAULT_STOP_BIT, \
    FLOW_CONTROLS, DEFAULT_FLOW_CONTROL, LINE_ENDINGS, DEFAULT_LINE_ENDING

logger = create_logger(name=__name__, level=logging.DEBUG)


class sercomView(QMainWindow, Ui_main_window):
    """
    sercom's view where the GUI components are assembled.
    """

    def __init__(self):
        """
        Initialize the view.
        """
        logger.debug(f"Creating view")
        super().__init__()
        self.setupUi(self)
        self.create_configuration_menu()
        self.connect_signals()
        self.text_cursor = QTextCursor(self.text_edit.document())
        self.auto_scroll = True

    def connect_signals(self):
        """
        Connects the signals and slots together.
        """
        logger.debug("Connecting signals and slots")
        self.connect_signals_file_menu()
        self.connect_signals_port_menu()
        self.connect_signals_configuration_menu()

    def connect_signals_file_menu(self):
        """
        Connects the signals and slots together for the file menu.
        """
        self.action_new_session.triggered.connect(self.create_new_session)
        self.action_exit.triggered.connect(self.close)

    def connect_signals_port_menu(self):
        """
        Connects the signals and slots together for the port menu.
        """
        self.action_disconnect.triggered.connect(self.disconnect_from_port)

    def connect_signals_configuration_menu(self):
        """
        Connects the signals and slots together for the configuration menu.
        (that weren't already connected when making the menu)
        """
        self.action_baud_rate.triggered.connect(self.open_set_baud_rate_dialog)

    def update_serial_ports(self):
        """
        Updates the serial port listing in the "ports" menu.
        """
        self.menu_connect_to_port.clear()
        self.menu_connect_actions = []
        for path, name in self.controller.get_serial_ports():
            port_action = self.menu_connect_to_port.addAction(name)
            port_action.triggered.connect(
                lambda _, p=path: self.connect_to_port(p))
            tip = f"Connect to the serial port {path}"
            port_action.setStatusTip(tip)
            port_action.setToolTip(tip)
            self.menu_connect_actions.append(port_action)
        self.menu_connect_to_port.addSeparator()
        custom_port_action = self.menu_connect_to_port.addAction(
            "Enter &custom port...")
        custom_port_action.triggered.connect(self.enter_custom_port)
        tip = "Enter a custom port path to connect to. "
        custom_port_action.setStatusTip(tip)
        custom_port_action.setToolTip(tip)
        self.menu_connect_actions.append(custom_port_action)
        self.menu_connect_to_port.addSeparator()
        self.refresh_ports_action = self.menu_connect_to_port.addAction(
            "&Refresh port list...")
        self.refresh_ports_action.triggered.connect(self.update_serial_ports)
        tip = "Refresh the list of serial ports. "
        self.refresh_ports_action.setStatusTip(tip)
        self.refresh_ports_action.setToolTip(tip)
        self.menu_connect_actions.append(self.refresh_ports_action)

    def update_menu_states(self):
        """
        Updates the menu states.
        """
        connected = self.controller.model.connected
        for action in self.menu_connect_actions:
            if action != self.refresh_ports_action:
                action.setEnabled(not connected)
        self.action_disconnect.setEnabled(connected)

    def after_controller_initialization(self):
        """
        Stuff to run after the controller is initialized.
        """
        self.controller.model.received_text.connect(self.on_received_text)
        self.controller.model.disconnected.connect(self.disconnect_from_port)
        self.update_serial_ports()
        self.update_menu_states()

    def create_configuration_menu(self):
        """
        Create the configuration menu by hand, so we can make and attach event
        handlers to it.
        """

        def make_options(menu: QMenu, dictionary: dict[str, Union[str, int]],
                         default: Union[str, int],
                         tooltip: str, callback: Callable):
            """
            Make an action group and add it to a menu.

            :param menu: The menu to add to.
            :param dictionary: A dictionary of labels to actual values.
            :param default: The default value.
            :param tooltip: The tool tip format, with {thing} as the replace
             value.
            :param callback: A callback that will be passed in the key and
             value from dictionary.
            """
            group = QActionGroup(menu)
            group.setExclusive(True)
            for label, thing in dictionary.items():
                new_label = label
                if thing == default:
                    new_label += " (default)"
                action = menu.addAction(new_label)
                action.triggered.connect(
                    lambda _, l=label.replace("&", ""),
                           t=thing: callback(l, t))
                action.setCheckable(True)
                action.setChecked(thing == default)
                tip = tooltip.format(thing=label)
                action.setStatusTip(tip.replace("&", ""))
                action.setToolTip(tip.replace("&", ""))
                group.addAction(action)

        make_options(self.menu_byte_size, BYTE_SIZES, DEFAULT_BYTE_SIZE,
                     "Set the byte size to {thing}", self.set_byte_size)
        make_options(self.menu_parity, PARITIES, DEFAULT_PARITY,
                     "Set the parity to {thing}", self.set_parity)
        make_options(self.menu_stop_bits, STOP_BITS, DEFAULT_STOP_BIT,
                     "Set the number of stop bits to {thing}",
                     self.set_stop_bits)
        make_options(self.menu_flow_control, FLOW_CONTROLS,
                     DEFAULT_FLOW_CONTROL, "Set the flow control to {thing}",
                     self.set_flow_control)
        make_options(self.menu_line_ending, LINE_ENDINGS,
                     DEFAULT_LINE_ENDING, "Set the line ending sent and "
                                          "received to {thing}",
                     self.set_line_ending)

    def set_status(self, status: str):
        """
        Set the current status.

        :param status: A string.
        """
        self.status_bar.showMessage(f"{status}")

    def create_new_session(self):
        """
        "Forks" this process to create a new session that is independent of
        the current session.
        """
        logger.debug("Creating new session")
        self.set_status("Creating new session...")
        self.controller.create_new_session()
        self.set_status("Created new session.")

    def enter_custom_port(self):
        """
        Pops up a dialog to type a custom port, and try to connect if the user
        clicked ok.
        """
        logger.debug("Opening enter custom port dialog")
        self.set_status("Connecting to custom port...")
        success, name = EnterCustomPortDialog().exec()
        if success:
            logger.debug(f"Custom port entered: {name}")
            self.set_status(f"Connecting to custom port {name}...")
            self.connect_to_port(name)
        else:
            logger.debug("Canceled entering custom port")
            self.set_status("Canceled connecting to custom port.")

    def connect_to_port(self, port: str):
        """
        Connect to a port.

        :param port: The port to connect to.
        """
        self.set_status(f"Connecting to port {port}...")
        try:
            self.controller.connect(port)
        except SerialException as exc:
            self.set_status(f"Failed to connect to port {port}! ({exc})")
            logger.exception(f"Failed to connect to port {port}!")
            error_dlg("sercom: Failed to connect to port!",
                      f"Failed to connect to port {port}!",
                      "".join(format_exception(*sys.exc_info())))
        else:
            self.set_status(f"Successfully connected to port {port}!")
            self.update_menu_states()
            self.text_edit.setPlaceholderText("Nothing was received.")
            self.setWindowTitle(f"sercom - {port}")

    def disconnect_from_port(self):
        """
        Disconnects from the connected port.
        """
        port = self.controller.model.port.name
        self.set_status(f"Disconnecting from port {port}...")
        self.controller.disconnect()
        self.set_status(f"Successfully disconnected from port {port}!")
        self.update_menu_states()
        self.text_edit.setPlaceholderText("Not connected to a port.")
        self.setWindowTitle(f"sercom")

    def open_set_baud_rate_dialog(self):
        """
        Opens the set baud rate dialog, and sets the baud rate if the users
        types in a baud rate.
        """
        logger.debug("Opening set baud rate dialog")
        self.set_status("Setting baud rate...")
        success, rate = SetBaudRateDialog().exec(
            self.controller.model.port.baudrate)
        if success:
            logger.debug(f"Baud rate entered: {rate}")
            self.set_baud_rate(rate)
        else:
            logger.debug("Canceled setting baud rate")
            self.set_status("Canceled setting baud rate.")

    def set_baud_rate(self, rate: int):
        """
        Sets the baud rate.

        :param rate: An integer.
        """
        self.set_status(f"Setting baud rate to {rate}...")
        self.controller.set_baud_rate(rate)
        self.set_status(f"Successfully set baud rate to {rate}!")

    def set_byte_size(self, label: str, size: int):
        """
        Sets the byte size.

        :param label: The labeled value.
        :param size: An int, use the constants in utils/serial_config
        """
        self.set_status(f"Setting byte size to {label}...")
        self.controller.set_byte_size(size)
        self.set_status(f"Successfully set byte size to {label}!")

    def set_parity(self, label: str, parity: str):
        """
        Sets the parity.

        :param label: The labeled value.
        :param parity: A str, use the constants in utils/serial_config
        """
        self.set_status(f"Setting parity to {label}...")
        self.controller.set_parity(parity)
        self.set_status(f"Successfully set parity to {label}!")

    def set_stop_bits(self, label: str, stop_bits: Union[int, float]):
        """
        Sets the number of stop bits.

        :param label: The labeled value.
        :param stop_bits: An int or float, use the constants in
         utils/serial_config
        """
        self.set_status(f"Setting number of stop bits to {label}...")
        self.controller.set_stop_bits(stop_bits)
        self.set_status(f"Successfully set number of stop bits to {label}!")

    def set_flow_control(self, label: str, control: int):
        """
        Set the flow control.

        :param label: The labeled value.
        :param control: An int, use the constants in utils/serial_config
        """
        self.set_status(f"Setting flow control to {label}...")
        self.controller.set_flow_control(control)
        self.set_status(f"Successfully set flow control to {label}!")

    def set_line_ending(self, label: str, ending: int):
        """
        Set the line ending.

        :param label: The labeled value.
        :param ending: An int, use the constants in utils/serial_config
        """
        self.set_status(f"Setting line ending to {label}...")
        self.controller.set_line_ending(ending)
        self.set_status(f"Successfully set line ending to {label}!")

    def on_received_text(self, text: str):
        """
        Callback when we receive text.

        :param text: A str.
        """
        self.text_cursor.insertText(text)
        if self.auto_scroll:
            self.text_edit.ensureCursorVisible()
