import logging

from PyQt5.QtWidgets import QMainWindow

from ui.autogenerated.main_window import Ui_main_window
from ui.wrappers.dialogs.enter_custom_port_dialog import EnterCustomPortDialog
from utils.logger import create_logger

logger = create_logger(name=__name__, level=logging.DEBUG)


class sercomView(QMainWindow, Ui_main_window):
    """
    sercom's view where the GUI components are assembled.
    """

    def __init__(self):
        """
        Initialize the view.
        """
        logger.debug(f"Creating view")
        super().__init__()
        self.setupUi(self)
        self.connect_signals()

    def connect_signals(self):
        """
        Connects the signals and slots together.
        """
        logger.debug("Connecting signals and slots")
        self.connect_signals_file_menu()

    def connect_signals_file_menu(self):
        """
        Connects the signals and slots together for the file menu.
        """
        self.action_new_session.triggered.connect(self.create_new_session)
        self.action_exit.triggered.connect(self.close)

    def update_serial_ports(self):
        """
        Updates the serial port listing in the "ports" menu.
        """
        self.menu_connect_to_port.clear()
        for path, name in self.controller.get_serial_ports():
            port_action = self.menu_connect_to_port.addAction(name)
            port_action.triggered.connect(
                lambda _, p=path: self.connect_to_port(p))
        self.menu_connect_to_port.addSeparator()
        custom_port_action = self.menu_connect_to_port.addAction(
            "Enter &custom port...")
        custom_port_action.triggered.connect(self.enter_custom_port)
        self.menu_connect_to_port.addSeparator()
        refresh_ports_action = self.menu_connect_to_port.addAction(
            "&Refresh port list...")
        refresh_ports_action.triggered.connect(self.update_serial_ports)

    def after_controller_initialization(self):
        """
        Stuff to run after the controller is initialized.
        """
        self.update_serial_ports()

    def create_new_session(self):
        """
        "Forks" this process to create a new session that is independent of
        the current session.
        """
        logger.debug("Creating new session")
        self.controller.create_new_session()

    def enter_custom_port(self):
        """
        Pops up a dialog to type a custom port, and try to connect if the user
        clicked ok.
        """
        logger.debug("Opening enter custom port dialog")
        success, name = EnterCustomPortDialog().exec()
        if success:
            logger.debug(f"Custom port entered: {name}")
            self.connect_to_port(name)
        else:
            logger.debug("Canceled entering custom port")

    def connect_to_port(self, port: str):
        """
        Connect to a port.

        :param port: The port to connect to.
        """
        logger.debug(f"Connecting to port {port}")
