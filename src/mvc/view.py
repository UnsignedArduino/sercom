import logging
import sys
from traceback import format_exception

from PyQt5.Qt import QTextCursor
from PyQt5.QtWidgets import QMainWindow
from serial.serialutil import SerialException

from ui.autogenerated.main_window import Ui_main_window
from ui.wrappers.dialogs.enter_custom_port_dialog import EnterCustomPortDialog
from utils.dialogs import error_dlg
from utils.logger import create_logger

logger = create_logger(name=__name__, level=logging.DEBUG)


class sercomView(QMainWindow, Ui_main_window):
    """
    sercom's view where the GUI components are assembled.
    """

    def __init__(self):
        """
        Initialize the view.
        """
        logger.debug(f"Creating view")
        super().__init__()
        self.setupUi(self)
        self.connect_signals()
        self.text_cursor = QTextCursor(self.text_edit.document())
        self.auto_scroll = True

    def connect_signals(self):
        """
        Connects the signals and slots together.
        """
        logger.debug("Connecting signals and slots")
        self.connect_signals_file_menu()
        self.connect_signals_port_menu()

    def connect_signals_file_menu(self):
        """
        Connects the signals and slots together for the file menu.
        """
        self.action_new_session.triggered.connect(self.create_new_session)
        self.action_exit.triggered.connect(self.close)

    def connect_signals_port_menu(self):
        """
        Connects the signals and slots together for the port menu.
        """
        self.action_disconnect.triggered.connect(self.disconnect_from_port)

    def update_serial_ports(self):
        """
        Updates the serial port listing in the "ports" menu.
        """
        self.menu_connect_to_port.clear()
        self.menu_connect_actions = []
        for path, name in self.controller.get_serial_ports():
            port_action = self.menu_connect_to_port.addAction(name)
            port_action.triggered.connect(
                lambda _, p=path: self.connect_to_port(p))
            tip = f"Connect to the serial port {path}"
            port_action.setStatusTip(tip)
            port_action.setToolTip(tip)
            self.menu_connect_actions.append(port_action)
        self.menu_connect_to_port.addSeparator()
        custom_port_action = self.menu_connect_to_port.addAction(
            "Enter &custom port...")
        custom_port_action.triggered.connect(self.enter_custom_port)
        tip = "Enter a custom port path to connect to. "
        custom_port_action.setStatusTip(tip)
        custom_port_action.setToolTip(tip)
        self.menu_connect_actions.append(custom_port_action)
        self.menu_connect_to_port.addSeparator()
        self.refresh_ports_action = self.menu_connect_to_port.addAction(
            "&Refresh port list...")
        self.refresh_ports_action.triggered.connect(self.update_serial_ports)
        tip = "Refresh the list of serial ports. "
        self.refresh_ports_action.setStatusTip(tip)
        self.refresh_ports_action.setToolTip(tip)
        self.menu_connect_actions.append(self.refresh_ports_action)

    def update_menu_states(self):
        """
        Updates the menu states.
        """
        connected = self.controller.model.connected
        for action in self.menu_connect_actions:
            if action != self.refresh_ports_action:
                action.setEnabled(not connected)
        self.action_disconnect.setEnabled(connected)

    def after_controller_initialization(self):
        """
        Stuff to run after the controller is initialized.
        """
        self.controller.model.received_text.connect(self.on_received_text)
        self.update_serial_ports()
        self.update_menu_states()

    def set_status(self, status: str):
        """
        Set the current status.

        :param status: A string.
        """
        self.status_bar.showMessage(f"{status}")

    def create_new_session(self):
        """
        "Forks" this process to create a new session that is independent of
        the current session.
        """
        logger.debug("Creating new session")
        self.set_status("Creating new session...")
        self.controller.create_new_session()
        self.set_status("Created new session.")

    def enter_custom_port(self):
        """
        Pops up a dialog to type a custom port, and try to connect if the user
        clicked ok.
        """
        logger.debug("Opening enter custom port dialog")
        self.set_status("Connecting to custom port...")
        success, name = EnterCustomPortDialog().exec()
        if success:
            logger.debug(f"Custom port entered: {name}")
            self.set_status(f"Connecting to custom port {name}...")
            self.connect_to_port(name)
        else:
            logger.debug("Canceled entering custom port")
            self.set_status("Canceled connecting to custom port.")

    def connect_to_port(self, port: str):
        """
        Connect to a port.

        :param port: The port to connect to.
        """
        self.set_status(f"Connecting to port {port}...")
        try:
            self.controller.connect(port)
        except SerialException as exc:
            self.set_status(f"Failed to connect to port {port}! ({exc})")
            logger.exception(f"Failed to connect to port {port}!")
            error_dlg("sercom: Failed to connect to port!",
                      f"Failed to connect to port {port}!",
                      "".join(format_exception(*sys.exc_info())))
        else:
            self.set_status(f"Successfully connected to port {port}!")
            self.update_menu_states()
            self.text_edit.setPlaceholderText("Nothing was received.")

    def disconnect_from_port(self):
        """
        Disconnects from the connected port.
        """
        port = self.controller.model.port.name
        self.set_status(f"Disconnecting from port {port}...")
        self.controller.disconnect()
        self.set_status(f"Successfully disconnected from port {port}!")
        self.update_menu_states()
        self.text_edit.setPlaceholderText("Not connected to a port.")

    def on_received_text(self, text: str):
        """
        Callback when we receive text.

        :param text: A str.
        """
        self.text_cursor.insertText(text)
        if self.auto_scroll:
            self.text_edit.ensureCursorVisible()
